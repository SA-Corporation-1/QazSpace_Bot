from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from deep_translator import GoogleTranslator

# –¢—ñ–ª –±–∞“ì—ã—Ç—ã–Ω —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω
user_translation_direction = {}

# –¢—ñ–ª —Ç–∞“£–¥–∞—É –º”ô–∑—ñ—Ä—ñ
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("English üá∫üá∏", callback_data='to_en')],
        [InlineKeyboardButton("Kazakh üá∞üáø", callback_data='to_kk')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("”®–∑ —Ç—ñ–ª—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose your language:", reply_markup=reply_markup)

# Callback: –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“ì–∞–Ω–¥–∞
async def language_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'to_en':
        user_translation_direction[query.from_user.id] = ('en', 'kk')
        await query.edit_message_text("Translation: English ‚Üí Kazakh. Type a message.")
    elif query.data == 'to_kk':
        user_translation_direction[query.from_user.id] = ('kk', 'en')
        await query.edit_message_text("–ê—É–¥–∞—Ä–º–∞: “ö–∞–∑–∞“õ—à–∞ ‚Üí –ê“ì—ã–ª—à—ã–Ω—à–∞. –ú”ô—Ç—ñ–Ω –∂–∞–∑—ã“£—ã–∑.")


# –ê—É–¥–∞—Ä–º–∞ –∂–∞—Å–∞—É
async def handle_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in user_translation_direction:
        await update.message.reply_text("–ê–ª–¥—ã–º–µ–Ω /translate –∫–æ–º–∞–Ω–¥–∞—Å—ã –∞—Ä“õ—ã–ª—ã —Ç—ñ–ª –±–∞“ì—ã—Ç—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑.")
        return

    src, dest = user_translation_direction[user_id]
    text_to_translate = update.message.text

    try:
        # deep-translator –∞—Ä“õ—ã–ª—ã –∞—É–¥–∞—Ä–º–∞ –∂–∞—Å–∞—É
        translated = GoogleTranslator(source=src, target=dest).translate(text_to_translate)
        await update.message.reply_text(translated)
    except Exception as e:
        await update.message.reply_text(f"–ê—É–¥–∞—Ä–º–∞–¥–∞ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")

# –•–µ–Ω–¥–ª–µ—Ä–ª–µ—Ä–¥—ñ “õ–æ—Å—É
def get_translate_handlers():
    return [
        CommandHandler("translate", choose_language),
        CallbackQueryHandler(language_chosen),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation),
    ]
