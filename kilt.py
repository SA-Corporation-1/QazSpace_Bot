import json
from telegram import Update
from telegram.ext import ContextTypes

# “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ —Å–∞“õ—Ç–∞–ª–∞—Ç—ã–Ω —Ñ–∞–π–ª
USER_LIST_FILE = "Akimsiler.json"

# –ê–¥–º–∏–Ω–Ω—ã“£ ID

      # ”©–∑—ñ“£—ñ–∑–¥—ñ“£ ID-—ñ“£—ñ–∑–¥—ñ –º“±–Ω–¥–∞ –∂–∞–∑—ã“£—ã–∑

# “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω —Å–∞“õ—Ç–∞—É
def load_user_list():
    try:
        with open(USER_LIST_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã —Ç—ñ–∑—ñ–º–≥–µ “õ–æ—Å—É
def save_user_list(user_list):
    with open(USER_LIST_FILE, "w") as f:
        json.dump(user_list, f)

# “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∂“Ø–∫—Ç–µ—É
ADMIN_LIST = load_user_list()  # [{"id": 5239409990, "nickname": "Admin1"}, ...]

# –¢–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω ADMIN_LIST-—Ç—ñ –±–∞—Å—ã–ø —à—ã“ì–∞—Ä—É
print("–ñ“Ø–∫—Ç–µ–ª–≥–µ–Ω –∞–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ:", ADMIN_LIST)

# /access –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî —Ç–µ–∫ –∞–¥–º–∏–Ω “ì–∞–Ω–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä–µ –∞–ª–∞–¥—ã
async def access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id  # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ID-—ñ –∞–ª—ã–Ω–∞–¥—ã

    # –¢–µ–∫ –∞–¥–º–∏–Ω–≥–µ “ì–∞–Ω–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—É–≥–µ —Ä“±“õ—Å–∞—Ç
    if user_id not in [admin["id"] for admin in ADMIN_LIST]:
        await update.message.reply_text("–°—ñ–∑–≥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã “õ–æ–ª–¥–∞–Ω—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ!")
        return

    # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ID-—ñ–Ω –∂”ô–Ω–µ –ª–∞“õ–∞–ø –∞—Ç—ã–Ω –∞–ª—É
    if len(context.args) < 2:
        await update.message.reply_text("ID –∂”ô–Ω–µ –ª–∞“õ–∞–ø –∞—Ç –∂–∞–∑—ã“£—ã–∑! –ú—ã—Å–∞–ª—ã: /access 1234567890 AdminName")
        return

    try:
        target_id = int(context.args[0])  # –ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω ID
        nickname = " ".join(context.args[1:])  # –õ–∞“õ–∞–ø –∞—Ç
    except ValueError:
        await update.message.reply_text("“ö–∞—Ç–µ ID! –°–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
        return

    if target_id not in [admin["id"] for admin in ADMIN_LIST]:
        ADMIN_LIST.append({"id": target_id, "nickname": nickname})  # –¢—ñ–∑—ñ–º–≥–µ “õ–æ—Å—É
        save_user_list(ADMIN_LIST)
        await update.message.reply_text(
            f"“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑, {nickname}! üéâ –°—ñ–∑ –µ–Ω–¥—ñ –±—ñ–∑–¥—ñ“£ “õ–∞—Ç–∞—Ä—ã–º—ã–∑“ì–∞ “õ–æ—Å—ã–ª–¥—ã“£—ã–∑.\n\n"
            "–î”ô—Ä–µ–∂–µ“£—ñ–∑: ”ò–∫—ñ–º—à—ñ üõ°Ô∏è\n\n"
            "–°—ñ–∑–≥–µ “õ–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä: \n"
            "‚úÖ /remove_access - “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã –∞–¥–º–∏–Ω–Ω–µ–Ω —à—ã“ì–∞—Ä—É\n"
            "‚úÖ /list_admins - –ë–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—É"
        )
    else:
        await update.message.reply_text(f"{target_id} “õ–æ–ª–¥–∞–Ω—É—à—ã—Å—ã –±“±—Ä—ã–Ω—ã—Ä–∞“õ –∞–¥–º–∏–Ω–¥—ñ–∫ –∞–ª“ì–∞–Ω.")

# /remove_access –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî –∞–¥–º–∏–Ω–¥—ñ —Ç—ñ–∑—ñ–º–Ω–µ–Ω –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É
async def remove_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id  # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ID-—ñ –∞–ª—ã–Ω–∞–¥—ã

    # –¢–µ–∫ –∞–¥–º–∏–Ω–≥–µ “ì–∞–Ω–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—É–≥–µ —Ä“±“õ—Å–∞—Ç
    if user_id not in [admin["id"] for admin in ADMIN_LIST]:
        await update.message.reply_text("–°—ñ–∑–≥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã “õ–æ–ª–¥–∞–Ω—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ!")
        return

    # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ID-—ñ–Ω –∞–ª—É
    if len(context.args) == 0:
        await update.message.reply_text("ID –∂–∞–∑—ã“£—ã–∑!")
        return

    try:
        target_id = int(context.args[0])  # –ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω ID
    except ValueError:
        await update.message.reply_text("“ö–∞—Ç–µ ID! –°–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
        return

    for admin in ADMIN_LIST:
        if admin["id"] == target_id:
            ADMIN_LIST.remove(admin)  # –¢—ñ–∑—ñ–º–Ω–µ–Ω –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É
            save_user_list(ADMIN_LIST)
            await update.message.reply_text(f"{admin['nickname']} ({target_id}) –∞–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω –∞–ª—ã–Ω—ã–ø —Ç–∞—Å—Ç–∞–ª–¥—ã!")
            return

    await update.message.reply_text(f"{target_id} “õ–æ–ª–¥–∞–Ω—É—à—ã—Å—ã –∞–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–¥–µ –∂–æ“õ.")

# /list_admins –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî –±–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–¥–µ—Ä–¥—ñ“£ —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É
async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id  # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ID-—ñ –∞–ª—ã–Ω–∞–¥—ã

    # –¢–µ–∫ –∞–¥–º–∏–Ω–≥–µ “ì–∞–Ω–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—É–≥–µ —Ä“±“õ—Å–∞—Ç
    if user_id not in [admin["id"] for admin in ADMIN_LIST]:
        await update.message.reply_text("–°—ñ–∑–≥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã “õ–æ–ª–¥–∞–Ω—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ!")
        return

    if not ADMIN_LIST:
        await update.message.reply_text("–ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ –±–æ—Å.")
        return

    admin_list = "\n".join([f"{admin['nickname']} ({admin['id']})" for admin in ADMIN_LIST])
    await update.message.reply_text(f"–ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ:\n{admin_list}")
