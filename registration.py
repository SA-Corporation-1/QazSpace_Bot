from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    filters,
)
import json
import random
from datetime import datetime

# ====== JSON —Ñ–∞–π–ª ======
REGISTERED_USERS_FILE = "AQPARAT_ORDASY.json"

# ====== –ú–æ—Ç–∏–≤–∞—Ü–∏—è–ª—ã“õ —Å”©–∑–¥–µ—Ä ======
MOTIVATIONAL_QUOTES = [
    "–ë“Ø–≥—ñ–Ω–≥—ñ –∫—ñ—à–∫–µ–Ω—Ç–∞–π “õ–∞–¥–∞–º ‚Äî –µ—Ä—Ç–µ“£–≥—ñ “Ø–ª–∫–µ–Ω –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç—ñ“£ –±–∞—Å—Ç–∞—É—ã! üöÄ",
    "–ï—à“õ–∞—à–∞–Ω –±–µ—Ä—ñ–ª–º–µ, –∞—Ä–º–∞–Ω—ã“£–¥—ã –∂“Ø–∑–µ–≥–µ –∞—Å—ã—Ä—É“ì–∞ –±—ñ—Ä “õ–∞–¥–∞–º –∂–∞“õ—ã–Ω—Å—ã“£! üí™",
    "–ë—ñ–ª—ñ–º ‚Äî –±–æ–ª–∞—à–∞“õ“õ–∞ —Å–∞–ª—ã–Ω“ì–∞–Ω –µ“£ –∂–∞“õ—Å—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è! üìö",
    "”ò—Ä –∫“Ø–Ω ‚Äî –∂–∞“£–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫! üåü",
    "”®–∑—ñ“£–µ —Å–µ–Ω, —Å–æ–Ω–¥–∞ –±”ô—Ä—ñ –¥–µ –º“Ø–º–∫—ñ–Ω! üîë",
]

# ====== Conversation —Å–∞—Ç—ã–ª–∞—Ä—ã ======
ASK_NAME, ASK_USERNAME = range(2)

# ====== –§–∞–π–ª–¥–∞–Ω “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –æ“õ—É ======
def load_users():
    try:
        with open(REGISTERED_USERS_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# ====== –§–∞–π–ª“ì–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∂–∞–∑—É ======
def save_users(users):
    with open(REGISTERED_USERS_FILE, "w") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

# ====== /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    print(f"DEBUG: /start –∫–æ–º–∞–Ω–¥–∞—Å—ã user_id: {user_id}")
    
    try:
        users = load_users()
        print(f"DEBUG: {len(users)} “õ–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–¥—ã")
    except Exception as e:
        print(f"DEBUG: –§–∞–π–ª –æ“õ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        users = []
    
    # –£–ê“ö–´–¢–®–ê: ”ò—Ä“õ–∞—à–∞–Ω —Ç—ñ—Ä–∫–µ–ª—É –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –∫”©—Ä—Å–µ—Ç—É
    keyboard = [[InlineKeyboardButton("üéØ –¢–Ü–†–ö–ï–õ–£ –¢–ï–°–¢", callback_data="register")]]
    await update.message.reply_text(
        "–¢—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ====== ¬´–¢—ñ—Ä–∫–µ–ª—É¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã ======
async def register_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ê—Ç—ã“£–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    return ASK_NAME

# ====== 1-“õ–∞—Ç–∞–º: –ê—Ç—ã ======
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["first_name"] = update.message.text
    await update.message.reply_text("–ï–Ω–¥—ñ –ª–∞“õ–∞–ø –∞—Ç—ã“£–¥—ã –µ–Ω–≥—ñ–∑:")
    return ASK_USERNAME

# ====== 2-“õ–∞—Ç–∞–º: –õ–∞“õ–∞–ø –∞—Ç—ã ======
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    user = update.message.from_user

    users = load_users()

    new_user = {
        "id": user.id,
        "first_name": context.user_data["first_name"],
        "last_name": user.last_name or "",
        "username": context.user_data["username"],
        "registered_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    }

    users.append(new_user)
    save_users(users)

    random_quote = random.choice(MOTIVATIONAL_QUOTES)
    await update.message.reply_text(
        f"‚úÖ –¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã!\n\n"
        f"–°”ô–ª–µ–º, {new_user['first_name']}! üëã\n"
        f"{random_quote}"
    )
    return ConversationHandler.END

# ====== –¢—ñ—Ä–∫–µ–ª—É–¥–µ–Ω –±–∞—Å —Ç–∞—Ä—Ç—É ======
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –¢—ñ—Ä–∫–µ–ª—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.")
    return ConversationHandler.END

# ====== Conversation Handler “õ“±—Ä—É ======
def get_registration_handler():
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(register_user, pattern="^register$")],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_username)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )