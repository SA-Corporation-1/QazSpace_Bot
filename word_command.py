import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –°”©–∑–¥–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def load_words():
    try:
        with open("words.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å”©–∑ –ª–∏–º–∏—Ç—ñ–Ω —Å–∞“õ—Ç–∞—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def save_user_limit(user_id, limit):
    try:
        with open("user_limits.json", "r", encoding="utf-8") as f:
            user_limits = json.load(f)
    except FileNotFoundError:
        user_limits = {}
    
    user_limits[str(user_id)] = limit
    
    with open("user_limits.json", "w", encoding="utf-8") as f:
        json.dump(user_limits, f, ensure_ascii=False, indent=4)

# “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å”©–∑ –ª–∏–º–∏—Ç—ñ–Ω –∂“Ø–∫—Ç–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def load_user_limit(user_id):
    try:
        with open("user_limits.json", "r", encoding="utf-8") as f:
            user_limits = json.load(f)
            return user_limits.get(str(user_id), 5)  # ”ò–¥–µ–ø–∫—ñ 5 —Å”©–∑
    except FileNotFoundError:
        return 5

# /word –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî –∫–µ–∑–¥–µ–π—Å–æ“õ —Å”©–∑–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É
async def word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    words = load_words()
    
    if not words:
        await update.message.reply_text("–°”©–∑–¥–µ—Ä –±–∞–∑–∞—Å—ã –±–æ—Å –Ω–µ–º–µ—Å–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return
    
    # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ª–∏–º–∏—Ç—ñ–Ω –∞–ª—É
    word_limit = load_user_limit(user_id)
    
    # –ö–µ–∑–¥–µ–π—Å–æ“õ —Å”©–∑–¥–µ—Ä–¥—ñ —Ç–∞“£–¥–∞—É
    if len(words) <= word_limit:
        selected_words = words
    else:
        selected_words = random.sample(words, word_limit)
    
    # –•–∞–±–∞—Ä–¥—ã “õ“±—Ä–∞—Å—Ç—ã—Ä—É
    message = f"üéØ –°—ñ–∑–≥–µ {word_limit} —Å”©–∑:\n\n"
    
    for i, word_data in enumerate(selected_words, 1):
        message += (
            f"{i}. **{word_data['word']}**\n"
            f"   –ê—É–¥–∞—Ä–º–∞: {word_data['translation']}\n"
            f"   –ú—ã—Å–∞–ª: {word_data['example']}\n\n"
        )
    
    # –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥–µ—Ä–≥–µ ”©—Ç—É “Ø—à—ñ–Ω –±–∞—Ç—ã—Ä–º–∞
    keyboard = [[InlineKeyboardButton("üîÑ –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥–µ—Ä", callback_data="next_words")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")

# /set_words –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî –∫“Ø–Ω—ñ–Ω–µ “õ–∞–Ω—à–∞ —Å”©–∑ –∂–∞—Ç—Ç–∞–π—Ç—ã–Ω—ã–Ω –±–∞–ø—Ç–∞—É
async def set_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("3 —Å”©–∑", callback_data="3"), InlineKeyboardButton("5 —Å”©–∑", callback_data="5")],
        [InlineKeyboardButton("10 —Å”©–∑", callback_data="10"), InlineKeyboardButton("15 —Å”©–∑", callback_data="15")],
        [InlineKeyboardButton("20 —Å”©–∑", callback_data="20")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ö“Ø–Ω—ñ–Ω–µ “õ–∞–Ω—à–∞ —Å”©–∑ –∂–∞—Ç—Ç–∞–π—Å—ã–∑?", reply_markup=reply_markup
    )

# CallbackQueryHandler –∞—Ä“õ—ã–ª—ã –∂–∞—É–∞–ø—Ç—ã ”©“£–¥–µ—É
async def handle_word_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    choice = query.data
    
    if choice == "next_words":
        # –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É
        words = load_words()
        word_limit = load_user_limit(user_id)
        
        if len(words) <= word_limit:
            selected_words = words
        else:
            selected_words = random.sample(words, word_limit)
        
        message = f"üéØ –ñ–∞“£–∞ {word_limit} —Å”©–∑:\n\n"
        
        for i, word_data in enumerate(selected_words, 1):
            message += (
                f"{i}. **{word_data['word']}**\n"
                f"   –ê—É–¥–∞—Ä–º–∞: {word_data['translation']}\n"
                f"   –ú—ã—Å–∞–ª: {word_data['example']}\n\n"
            )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥–µ—Ä", callback_data="next_words")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        # –°”©–∑ –ª–∏–º–∏—Ç—ñ–Ω —Å–∞“õ—Ç–∞—É
        save_user_limit(user_id, int(choice))
        
        # –î–µ—Ä–µ–∫—Ç—ñ —Å”©–∑–¥–µ—Ä–¥—ñ –±—ñ—Ä–¥–µ–Ω –∫”©—Ä—Å–µ—Ç—É
        words = load_words()
        word_limit = int(choice)
        
        if not words:
            await query.edit_message_text("–°”©–∑–¥–µ—Ä –±–∞–∑–∞—Å—ã –±–æ—Å. –ê–ª–¥—ã–º–µ–Ω —Å”©–∑–¥–µ—Ä–¥—ñ “õ–æ—Å—ã“£—ã–∑.")
            return
        
        if len(words) <= word_limit:
            selected_words = words
        else:
            selected_words = random.sample(words, word_limit)
        
        message = f"‚úÖ –°—ñ–∑ {choice} —Å”©–∑ —Ç–∞“£–¥–∞–¥—ã“£—ã–∑! üéâ\n\n"
        message += f"–¢”©–º–µ–Ω–¥–µ {word_limit} —Å”©–∑:\n\n"
        
        for i, word_data in enumerate(selected_words, 1):
            message += (
                f"{i}. **{word_data['word']}**\n"
                f"   –ê—É–¥–∞—Ä–º–∞: {word_data['translation']}\n"
                f"   –ú—ã—Å–∞–ª: {word_data['example']}\n\n"
            )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥–µ—Ä", callback_data="next_words")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")

# /my_limit –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî –∞“ì—ã–º–¥–∞“ì—ã –ª–∏–º–∏—Ç—Ç—ñ –∫”©—Ä—Å–µ—Ç—É
async def my_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    current_limit = load_user_limit(user_id)
    
    await update.message.reply_text(f"üìä –°—ñ–∑–¥—ñ“£ –∞“ì—ã–º–¥–∞“ì—ã –ª–∏–º–∏—Ç—ñ“£—ñ–∑: {current_limit} —Å”©–∑/–∫“Ø–Ω")

# /add_word –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äî –∂–∞“£–∞ —Å”©–∑ “õ–æ—Å—É (–∞–¥–º–∏–Ω–¥–µ—Ä “Ø—à—ñ–Ω)
async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë“±–ª –∂–µ—Ä–¥–µ –∞–¥–º–∏–Ω–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—É “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã
    if context.args and len(context.args) >= 3:
        new_word = {
            "word": context.args[0],
            "translation": context.args[1],
            "example": " ".join(context.args[2:])
        }
        
        words = load_words()
        words.append(new_word)
        
        with open("words.json", "w", encoding="utf-8") as f:
            json.dump(words, f, ensure_ascii=False, indent=4)
        
        await update.message.reply_text(f"‚úÖ –°”©–∑ —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã: {new_word['word']}")
    else:
        await update.message.reply_text("“ö–∞—Ç–∞—Ä—ã–º–µ–Ω: /add_word <—Å”©–∑> <–∞—É–¥–∞—Ä–º–∞> <–º—ã—Å–∞–ª>")